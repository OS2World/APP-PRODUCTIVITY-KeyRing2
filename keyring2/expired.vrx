/*:VRX         Main
*/
/*  Main ~nokeywords~
*/
Main:
/*  Process the arguments.
    Get the parent window.
*/
    PARSE SOURCE . Calledas .
    Parent = ""
    Argcount = ARG()
    Argoff = 0
    IF( Calledas \= "COMMAND" )THEN DO
        IF Argcount >= 1 THEN DO
            Parent = ARG(1)
            Argcount = Argcount - 1
            Argoff = 1
        END
    END
        ELSE DO
            CALL Vroptions 'ImplicitNames'
            CALL Vroptions 'NoEchoQuit'
        END
    Initargs.0 = Argcount
    IF( Argcount > 0 )THEN DO I = 1 TO Argcount
        Initargs.i = ARG( I + Argoff )
    END
    DROP Calledas Argcount Argoff

/*  Load the windows
*/
    CALL Vrinit
    PARSE SOURCE . . Spec
    _vreprimarywindowpath = ,
        Vrparsefilename( Spec, "dpn" ) || ".VRW"
    _vreprimarywindow = ,
        Vrload( Parent, _vreprimarywindowpath )
    DROP Parent Spec
    IF( _vreprimarywindow == "" )THEN DO
        CALL Vrmessage "", "Cannot load window:" Vrerror(), ,
            "Error!"
        _vrereturnvalue = 32000
        SIGNAL _vreleavemain
    END

/*  Process events
*/
    CALL Init
    SIGNAL ON HALT
    DO While( \ Vrget( _vreprimarywindow, "Shutdown" ) )
        _vreevent = Vrevent()
        INTERPRET _vreevent
    END
_vrehalt:
    _vrereturnvalue = Fini()
    CALL Vrdestroy _vreprimarywindow
_vreleavemain:
    CALL Vrfini
    EXIT _vrereturnvalue

Vrloadsecondary:
    __vrlswait = ABBREV( 'WAIT', TRANSLATE(ARG(2)), 1 )
    IF __vrlswait THEN DO
        CALL Vrflush
    END
    __vrlshwnd = Vrload( Vrwindow(), Vrwindowpath(), ARG(1) )
    IF __vrlshwnd = '' THEN SIGNAL __vrlsdone
    IF __vrlswait \= 1 THEN SIGNAL __vrlsdone
    CALL Vrset __vrlshwnd, 'WindowMode', 'Modal'
    __vrlstmp = __vrlswindows.0
    IF( DATATYPE(__vrlstmp) \= 'NUM' ) THEN DO
        __vrlstmp = 1
    END
        ELSE DO
            __vrlstmp = __vrlstmp + 1
        END
    __vrlswindows.__vrlstmp = Vrwindow( __vrlshwnd )
    __vrlswindows.0 = __vrlstmp
    DO While( Vrisvalidobject( Vrwindow() ) = 1 )
        __vrlsevent = Vrevent()
        INTERPRET __vrlsevent
    END
    __vrlstmp = __vrlswindows.0
    __vrlswindows.0 = __vrlstmp - 1
    CALL Vrwindow __vrlswindows.__vrlstmp
    __vrlshwnd = ''
__vrlsdone:
RETURN __vrlshwnd

/*:VRX         Expired_Close
*/
Expired_close:
    CALL Quit
RETURN

/*:VRX         Expired_Help
*/
Expired_help:
    CALL Infhelp(Vrinfo("Source"))
RETURN


/*:VRX         Expired_LangException
*/
Expired_LangException: 

return

/*:VRX         Expired_LangInit
*/
Expired_LangInit:

    /* ------------------------------------------------ */
    /* Language internationalization code autogenerated */
    /* by VXNation v1.0, Copyright 1999, IDK, Inc.      */
    /*          http://www.idk-inc.com                  */
    /* Autogenerated: 03/06/2000 19:22:29             */
    /* ------------------------------------------------ */
    /* Warning! This code gets overwritten by VXNation! */
    /* Do not make modifications here!                  */
    /* ------------------------------------------------ */

    /* Expired Records */
    Ok = VRSet("Expired", "WindowListTitle", VLSMsg(288))

    /* KeyRing/2 Expired Records */
    Ok = VRSet("Expired", "Caption", VLSMsg(289))

    /* Expired Passwords */
    Ok = VRSet("IconContainer", "Caption", VLSMsg(290))

    /* Double click on records to edit their expiration dates */
    Ok = VRSet("IconContainer", "HintText", VLSMsg(291))

    /* ~Exit */
    Ok = VRSet("QuitButton", "Caption", VLSMsg(269))

    /* Timer */
    Ok = VRSet("FlashTimer", "Caption", VLSMsg(66))

    call Expired_LangException
    DROP Ok

RETURN

/*:VRX         Expired_Resize
*/
Expired_resize:
    Ok = Vrset( "FlashTimer", "Delay", 1000 )
    Ok = Vrset( "FlashTimer", "Enabled", 1)
    Ok = Vrset("GB_1", "Visible", 0)
    Ok = Vrset("GB_2", "Visible", 0)

    Width = Vrget( "Expired", "Width" )
    Height = Vrget( "Expired", "Height" )

    IF Height > 3600 THEN DO
        Gbtop = Height - 1228
        Ok = Vrset("GB_2", "Top", Gbtop)
        Gb1hyt = Height - 1400
        Ok = Vrset( "GB_1", "Height", Gb1hyt )
        Ok = Vrset( "IconContainer", "Height", Gb1hyt-241 )
    END

    IF Width > 2244 THEN DO
        Gb1w = Width - 217
        Ok = Vrset( "GB_1", "Width", Gb1w )
        Ok = Vrset("GB_2", "Width", Gb1w)
        Ok = Vrset( "IconContainer", "Width", Gb1w - 241 )
    END

    IF Lasthyt <> Height THEN DO
        Ok = Vrmethod( "IconContainer", "Arrange" )
    END
        ELSE DO
            IF Lastwid <> Width THEN DO
                Ok = Vrmethod( "IconContainer", "Arrange" )
            END
        END

    Lasthyt = Height
    Lastwid = Width
RETURN

/*:VRX         Fini
*/
Fini:
    Window = Vrwindow()
    CALL Vrset Window, "Visible", 0
    DROP Window
RETURN 0

/*:VRX         FlashTimer_Trigger
*/
Flashtimer_trigger:
    Ok = Vrset("GB_1", "Visible", 1)
    Ok = Vrset("GB_2", "Visible", 1)
    Ok = Vrset( "FlashTimer", "Enabled", 0)
RETURN

/*:VRX         GetColumnName
*/
Getcolumnname:
    Value = Krgetcolumnname(ARG(2), ARG(3))
    IF Value = "" THEN DO
        Value = Vlsmsg(ARG(1))
    END
RETURN Value

/*:VRX         Halt
*/
Halt:
    SIGNAL _vrehalt
RETURN

/*:VRX         IconContainer_DoubleClick
*/
Iconcontainer_doubleclick: PROCEDURE EXPOSE Appname Ininame
    /* get selected item(s) and edit them in-turn */
    Ok = Vrmethod("IconContainer", "GetRecordList", "SourceOrSelected", Selectedrecs. )

    IF Selectedrecs.0 > 0 THEN DO
        DO Indx = 1 TO Selectedrecs.0
            Contindex = Vrmethod( "IconContainer", "GetFieldData", Selectedrecs.indx, "PgField" )
            /* Ok = VRMethod( "IconContainer", "RemoveRecord", "SelectedRecs.Indx" ) */
            Ok = Editrec(Vrwindow(), Vrget("IconContainer", "Self" ), Selectedrecs.indx, Contindx, Appname, Ininame)
            CALL Updatetree
        END
    END
        ELSE DO
            Buttons.1 = Vlsmsg(80)                              /* Ok */
            Buttons.0 = 1
            Id = Vrmessage( Vrwindow(), Vlsmsg(110) /* You must first select one or more items. */, Vlsmsg(111) /* Information */, "Information", "Buttons.", , )
            DROP Selectedrecs Id Buttons
        END
    CALL Updatetree
RETURN

/*:VRX         INFHelp
*/
Infhelp:
    ADDRESS Cmd 'start view kr2.inf' Vrget(ARG(1), "UserData")
RETURN

/*:VRX         Init
*/
Init:
    Ok = RXFUNCADD("VLLoadFuncs", "VLMSG", "VLLoadFuncs")/* do not modify or move this line! It must be on line #2 of this function */
    CALL Vlloadfuncs/* do not modify or move this line! It must be on line #3 of this function */
    Ok = Vrredirectstdio("On", "keyring2.err")

    Ok = RXFUNCADD("KRILoadFuncs", "KRINI", "KRILoadFuncs")
    CALL Kriloadfuncs

    Appname = Initargs.1
    Ininame = Initargs.2

    Window = Vrwindow()

    Appname = "KR2"
    Ininame = "KR2.INI"

    Langname = Vrgetini( Appname, "LANGUAGE", Ininame, "NOCLOSE" )
    IF Langname = "" THEN DO
        Langname = "ENGLISH.MSG"
    END
    Ok = Vlopenlang(Langname, Langname)

    CALL Waitmouse
    CALL Expired_langinit

    Value = Vrgetini( Appname, "EXPTOP", Ininame )
    IF Value = "" THEN DO
        Value = 1200
	END
    Exptop = Value

    Value = Vrgetini( Appname, "EXPLEFT", Ininame )
    IF Value = "" THEN DO
        Value =1100
	end
    Expleft = Value

    Value = Vrgetini( Appname, "EXPHYT", Ininame )
    IF Value = "" THEN do
        Value = 4661
	end
    Exphyt = Value

    Value = Vrgetini( Appname, "EXPWID", Ininame )
    IF Value = "" THEN do
        Value = 7502
	end
    Expwidth = Value

    Ok = Vrset( "Expired", "Top", Exptop )
    Ok = Vrset( "Expired", "Left", Expleft )
    Ok = Vrset( "Expired", "Height", Exphyt )
    Ok = Vrset( "Expired", "Width", Expwidth )
    Conttype = 1
    DO I = 1 TO 9
        Colstr = Krgetcolumnenable(Conttype, I)
        PARSE VAR Colstr Enb "þ" Flag "þ" Hint
        IF Flag = "I" THEN DO
            Style = "Icon"
        END
            ELSE DO
                Style = "String"
            END
        /* create a new column, using either a custom column name or the default from the English file */
        Fieldnames.i = "F" || I
        Fieldid.i = Vrmethod(Iconcontainer, "AddField", Style, Getcolumnname(98+I, Conttype, I), Fieldnames.i)
    END
    Fieldid.10 = Vrmethod(Iconcontainer, "AddField", "String", "Order", "OrdField")
    Fieldid.11 = Vrmethod(Iconcontainer, "AddField", "String", "Pg", "PgField")
    Fieldid.12 = Vrmethod(Iconcontainer, "AddField", "String", "Indx", "IndxField")
    Fieldid.0 = 12

    CALL Populatecontainer

    CALL Vrset Window, "Visible", 1
    CALL Vrmethod Window, "Activate"
    DROP Window
    CALL NormalMouse
RETURN

/*:VRX         NormalMouse
*/
NormalMouse: 
    CALL Vrset Vrwindow(), "Pointer", "<default>"/* show "Busy" mouse pointer */
return

/*:VRX         PopulateContainer
*/
Populatecontainer: PROCEDURE
    Ok = Vrmethod( "IconContainer", "GetFieldList", "FieldID." )
    Items.0 = 0
    I = 1
    Order = Krgetdefaultorder()
    Value = Krgetexpiredrec(1,,
        Order,,
        Fieldid.1,,
        Fieldid.2,,
        Fieldid.3,,
        Fieldid.4,,
        Fieldid.5,,
        Fieldid.6,,
        Fieldid.7,,
        Fieldid.8,,
        Fieldid.9,,
        Fieldid.10,,
        Fieldid.11,,
        Fieldid.12)

    IF Value = "0" THEN DO
        RETURN
    END

    Items.i = Value

    DO FOREVER
        I = I + 1
        Items.i = Krgetexpiredrec(0,,
            Order,,
            Fieldid.1,,
            Fieldid.2,,
            Fieldid.3,,
            Fieldid.4,,
            Fieldid.5,,
            Fieldid.6,,
            Fieldid.7,,
            Fieldid.8,,
            Fieldid.9,,
            Fieldid.10,,
            Fieldid.11,,
            Fieldid.12)
        IF Items.i = "0" THEN LEAVE
    END

    Items.0 = I-1
    Ok = Vrmethod( "IconContainer", "AddRecordList", , "Last", "Items.")
    Ok = Vrmethod( "IconContainer", "GetRecordList", "All", "AllRecs." )
RETURN

/*:VRX         Quit
*/
Quit:
    Ok = Vrsetini( Appname, "EXPTOP", Vrget("Expired", "Top" ), Ininame)
    Ok = Vrsetini( Appname, "EXPLEFT", Vrget("Expired", "Left" ), Ininame)
    Ok = Vrsetini( Appname, "EXPHYT", Vrget("Expired", "Height" ), Ininame)
    Ok = Vrsetini( Appname, "EXPWID", Vrget("Expired", "Width" ), Ininame)

    Window = Vrwindow()
    CALL Vrset Window, "Shutdown", 1
    DROP Window
RETURN

/*:VRX         QuitButton_Click
*/
Quitbutton_click:
    CALL Quit
RETURN

/*:VRX         UpdateTree
*/
Updatetree: PROCEDURE
    Ok = Vrset( "IconContainer", "Visible", 0 )

    /* get all container item(s) */
    Ok = Vrmethod( "IconContainer", "GetRecordList", "All", Reclist. )

    IF Reclist.0 > 0 THEN DO
        /* step through all records in container */
        DO I = 1 TO Reclist.0
            /* get all field values for current record */
            Ok = Vrmethod( "IconContainer", "GetFieldData", Reclist.i, Fieldvals. )
            /* overwrite tree records with container field data */
            Ok = Krputrec(Fieldvals.11, Fieldvals.12, Fieldvals.10, Fieldvals.1, Fieldvals.2, Fieldvals.3, Fieldvals.4, Fieldvals.5, Fieldvals.6, Fieldvals.7, Fieldvals.8, Fieldvals.9)

            /* Erase this record from the container */
            Ok = Vrmethod( "IconContainer", "RemoveRecord", Reclist.i )
        END
        DROP Selectedrecs I
    END

    /* re-populate the container with any remaining expired records */
    CALL Populatecontainer

    Ok = Vrset( "IconContainer", "Visible", 1)
RETURN


/*:VRX         Waitmouse
*/
Waitmouse: 
    CALL Vrset Vrwindow(), "Pointer", "Wait"/* show "Busy" mouse pointer */

return

