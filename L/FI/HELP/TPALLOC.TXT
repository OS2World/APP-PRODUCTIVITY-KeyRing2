;
;-------------------------------------------------------------------
!TOPIC 3232 TpAlloc
The TpAlloc unit is used by 1067MSort to allocate blocks of heap
that are greater than 64K in size.

  3233HugeGetMem                     3234HugeFreeMem
  3235Linear                         3236LinearToPointer
  3237PtrDiff                        3238Normalized
;
;-------------------------------------------------------------------
!TOPIC 3233 HugeGetMem
!NOINDEX
procedure 3232TpAlloc.HugeGetMem(var Pt; Bytes : LongInt);

Allocate a block of memory of size Bytes and store pointer to it in
Pt. Pt is nil if Bytes > MaxAvail.

See also:  3234HugeFreeMem
;
;-------------------------------------------------------------------
!TOPIC 3234 HugeFreeMem
!NOINDEX
procedure 3232TpAlloc.HugeFreeMem(var Pt; Bytes : LongInt);

Deallocate a block of memory of size Bytes pointed to by Pt, a pointer
variable. Pt is set to nil on Exit. Does nothing if Pt is nil.

See also:  3233HugeGetMem
;
;-------------------------------------------------------------------
!TOPIC 3235 Linear
!NOINDEX
function 3232TpAlloc.Linear(P : Pointer) : LongInt;

Converts a pointer to a linear address to allow differences in addresses to
be calculated. The pointer must be in the range $0:$0 to $FFFF:$000F.

See also:  3236LinearToPointer
;
;-------------------------------------------------------------------
!TOPIC 3236 LinearToPointer
!NOINDEX
function 3232TpAlloc.LinearToPointer(L : LongInt) : Pointer;

Return linear address L as a normalized pointer.

See also:  3235Linear
;
;-------------------------------------------------------------------
!TOPIC 3237 PtrDiff
!NOINDEX
function 3232TpAlloc.PtrDiff(P1, P2 : Pointer) : LongInt;

Return the number of bytes between P1^ and P2^.
;
;-------------------------------------------------------------------
!TOPIC 3238 Normalized
!NOINDEX
function 3232TpAlloc.Normalized(P : Pointer) : Pointer;

Return P as a normalized pointer.
