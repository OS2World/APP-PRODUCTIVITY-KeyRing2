;
;-------------------------------------------------------------------
!TOPIC 2526 NumKeys
B-Tree Filer requires that all index keys take the form of a string. This
offers the greatest flexibility in designing indexes: keys can be composed
of several record fields, they can be stored in compressed format, they can
be logically inverted, and so on. Nevertheless, numeric values are often
desirable for keys because they encode unique information in a compact
format.

The NumKeys unit offers routines to convert numeric values to sortable
key strings and back again. The strings produced are compact, and the exact
numeric value may be recovered by calling the inverse routine. Although the
encoded strings cannot be viewed directly, they are carefully designed to
produce the correct sorting order when used in a B-Tree or in any data
file.

The NumKeys unit also contains several routines that can create packed
key strings. Given a regular string, these routines will return a
compressed version of it. There are also complementary routines provided to
unpack a packed key string.

The NumKeys unit also contains several routines that can help when
accessing fileblocks created with B-Tree Filer for C. These routines convert
a Pascal-style numeric key to a C-style one and vice-versa, and there is a
routine to invert a key string according to the C-style algorithm.

Finally there is also a routine provided that inverts a string key, to allow
descending sorts.

  2556C-Style keys     2553DescendingKey
  2527Keys to numbers  2528Numbers to keys
  2529Packing keys     2530Unpacking keys
;
;-------------------------------------------------------------------
!TOPIC 2527 Keys to numbers
!NOINDEX
!NOSEARCH
The following routines convert from a sortable string key back to the
numeric key:

  2542KeyToBcd
  2555KeyToByte
  2544KeyToExt
  2534KeyToInt
  2538KeyToLong
  2540KeyToReal
  2532KeyToShort
  2536KeyToWord
;
;-------------------------------------------------------------------
!TOPIC 2528 Numbers to keys
!NOINDEX
!NOSEARCH
The following routines convert from a numeric type to a sortable string:

  2541BcdToKey
  2554ByteToKey
  2543ExtToKey
  2533IntToKey
  2537LongToKey
  2539RealToKey
  2531ShortToKey
  2535WordToKey
;
;-------------------------------------------------------------------
!TOPIC 2529 Packing keys
!NOINDEX
!NOSEARCH
The following routines pack a key string:

  2545Pack4BitKey                    2546Pack5BitKeyUC
  2548Pack6BitKey                    2547Pack6BitKeyUC
;
;-------------------------------------------------------------------
!TOPIC 2530 Unpacking keys
!NOINDEX
!NOSEARCH
The following routines unpack a key string:

  2549Unpack4BitKey                  2550Unpack5BitKeyUC
  2552Unpack6BitKey                  2551Unpack6BitKeyUC
;
;-------------------------------------------------------------------
!TOPIC 2531 ShortToKey
!NOINDEX
function 2526NumKeys.ShortToKey(S : ShortInt) : String1;

Convert a shortint to a string.

See also:  2532KeyToShort
;
;-------------------------------------------------------------------
!TOPIC 2532 KeyToShort
!NOINDEX
function 2526NumKeys.KeyToShort(S : String1) : ShortInt;

Convert a string to a shortint.

See also:  2531ShortToKey
;
;-------------------------------------------------------------------
!TOPIC 2533 IntToKey
!NOINDEX
function 2526NumKeys.IntToKey(I : Integer) : String2;

Convert an integer to a string.

See also:  2534KeyToInt
;
;-------------------------------------------------------------------
!TOPIC 2534 KeyToInt
!NOINDEX
function 2526NumKeys.KeyToInt(S : String2) : Integer;

Convert a string to an integer.

See also:  2533IntToKey
;
;-------------------------------------------------------------------
!TOPIC 2535 WordToKey
!NOINDEX
function 2526NumKeys.WordToKey(W : Word) : String2;

Convert a word to a string.

See also:  2536KeyToWord
;
;-------------------------------------------------------------------
!TOPIC 2536 KeyToWord
!NOINDEX
function 2526NumKeys.KeyToWord(S : String2) : Word;

Convert a string to a word.

See also:  2535WordToKey
;
;-------------------------------------------------------------------
!TOPIC 2537 LongToKey
!NOINDEX
function 2526NumKeys.LongToKey(L : LongInt) : String4;

Convert a longint to a string.

See also:  2538KeyToLong
;
;-------------------------------------------------------------------
!TOPIC 2538 KeyToLong
!NOINDEX
function 2526NumKeys.KeyToLong(S : String4) : LongInt;

Convert a string to a longint.

See also:  2537LongToKey
;
;-------------------------------------------------------------------
!TOPIC 2539 RealToKey
!NOINDEX
function 2526NumKeys.RealToKey(R : Real) : String6;

Convert a real to a string.

See also:  2540KeyToReal
;
;-------------------------------------------------------------------
!TOPIC 2540 KeyToReal
!NOINDEX
function 2526NumKeys.KeyToReal(S : String6) : Real;

Convert a string to a real.

See also:  2539RealToKey
;
;-------------------------------------------------------------------
!TOPIC 2541 BcdToKey
!NOINDEX
function 2526NumKeys.BcdToKey(var B) : String10;

Convert a BCD real to a string.

See also:  2542KeyToBcd
;
;-------------------------------------------------------------------
!TOPIC 2542 KeyToBcd
!NOINDEX
procedure 2526NumKeys.KeyToBcd(S : String10; var B);

Convert a string to a BCD real.

See also:  2541BcdToKey
;
;-------------------------------------------------------------------
!TOPIC 2543 ExtToKey
!NOINDEX
function 2526NumKeys.ExtToKey(E : Extended) : String10;

Convert an extended (or any other 8087 real) to a string.

See also:  2544KeyToExt
;
;-------------------------------------------------------------------
!TOPIC 2544 KeyToExt
!NOINDEX
procedure 2526NumKeys.KeyToExt(S : String10) : Extended;

Convert a string to an extended.

See also:  2543ExtToKey
;
;-------------------------------------------------------------------
!TOPIC 2545 Pack4BitKey
!NOINDEX
function 2526NumKeys.Pack4BitKey(Src : string; Len : Byte) : string;

Pack the Src string into sequences of 4 bits. Len is the maximum length
of the string to return. The following characters are mapped to 1-15,
respectively, all others to 0: '(', ')', '+', '-', '.', '0'..'9'.

See also:  2549Unpack4BitKey
;
;-------------------------------------------------------------------
!TOPIC 2546 Pack5BitKeyUC
!NOINDEX
function 2526NumKeys.Pack5BitKeyUC(Src : string; Len : Byte) : string;

Pack the Src string into sequences of 5 bits. Len is the maximum length
of the string to return. Characters from 'a' to 'z' are converted to upper
case, then characters from 'A' to 'Z' are mapped to 1-26, all others to 0.

See also:  2550Unpack5BitKeyUC
;
;-------------------------------------------------------------------
!TOPIC 2547 Pack6BitKeyUC
!NOINDEX
function 2526NumKeys.Pack6BitKeyUC(Src : string; Len : Byte) : string;

Pack the Src string into sequences of 6 bits. Len is the maximum length
of the string to return. Characters from 'a' to 'z' are converted to upper
case, then characters from '!' to '_' are mapped to 1-63, all others to 0.

See also:  2551Unpack6BitKeyUC
;
;-------------------------------------------------------------------
!TOPIC 2548 Pack6BitKey
!NOINDEX
function 2526NumKeys.Pack6BitKey(Src : string; Len : Byte) : string;

Pack the Src string into sequences of 6 bits. Len is the maximum length
of the string to return. Characters from '0'-'9' are mapped to 1-10,
'A'-'Z' to 11-36, 'a'-'z' to 37-62, all others to 0.

See also:  2552Unpack6BitKey
;
;-------------------------------------------------------------------
!TOPIC 2549 Unpack4BitKey
!NOINDEX
function 2526NumKeys.Unpack4BitKey(Src : string) : string;

Unpack a key created by Pack4BitKey.

See also:  2545Pack4BitKey
;
;-------------------------------------------------------------------
!TOPIC 2550 Unpack5BitKeyUC
!NOINDEX
function 2526NumKeys.Unpack5BitKeyUC(Src : string) : string;

Unpack a key created by Pack5BitKeyUC.

See also:  2546Pack5BitKeyUC
;
;-------------------------------------------------------------------
!TOPIC 2551 Unpack6BitKeyUC
!NOINDEX
function 2526NumKeys.Unpack6BitKeyUC(Src : string) : string;

Unpack a key created by Pack6BitKeyUC.

See also:  2547Pack6BitKeyUC
;
;-------------------------------------------------------------------
!TOPIC 2552 Unpack6BitKey
!NOINDEX
function 2526NumKeys.Unpack6BitKey(Src : string) : string;

Unpack a key created by Pack6BitKey.

See also:  2548Pack6BitKey
;
;-------------------------------------------------------------------
!TOPIC 2553 DescendingKey
!NOINDEX
function 2526NumKeys.DescendingKey(S : string; MaxLen : Byte) : string;

Invert values in S to allow descending sorts, pad to MaxLen with #$FF.
;
;-------------------------------------------------------------------
!TOPIC 2554 ByteToKey
!NOINDEX
function 2526NumKeys.ByteToKey(B : Byte) : String10;

Convert a Byte to a string.

See also:  2555KeyToByte
;
;-------------------------------------------------------------------
!TOPIC 2555 KeyToByte
!NOINDEX
function 2526NumKeys.KeyToByte(S : String10) : Byte;

Convert a string to a Byte.

See also:  2554ByteToKey
;
;-------------------------------------------------------------------
!TOPIC 2556 C-Style Keys
!NOINDEX
!NOSEARCH

The following routines are used to convert keys between Pascal-style
keys and C-style keys, using the algorithms defined in B-Tree Filer for C.

  2557CStyleNumKey       2559CStyleDescendingKey
  2558PascalStyleNumKey
;
;-------------------------------------------------------------------
!TOPIC 2557 CStyleNumKey
!NOINDEX
function CStyleNumKey(S : String) : String;

Convert Pascal-style numeric key S into a C-style numeric key, compatible
with ASCIIZ.

See also:  2558PascalStyleNumKey
;
;-------------------------------------------------------------------
!TOPIC 2558 PascalStyleNumKey
!NOINDEX
function PascalStyleNumKey(S : String) : String;

Convert C-style numeric key S into a Pascal-style numeric key.

See also:  2557CStyleNumKey
;
;-------------------------------------------------------------------
!TOPIC 2559 CStyleDescendingKey
!NOINDEX
function CStyleDescendingKey(S : string; MaxLen : byte) : string;

Convert S to a descending key, using C-style algorithm.
